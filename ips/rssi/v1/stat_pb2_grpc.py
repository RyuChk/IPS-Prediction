# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ips.rssi.v1 import stat_pb2 as ips_dot_rssi_dot_v1_dot_stat__pb2


class StatCollectionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CollectData = channel.unary_unary(
                '/ips.rssi.v1.StatCollectionService/CollectData',
                request_serializer=ips_dot_rssi_dot_v1_dot_stat__pb2.CollectDataRequest.SerializeToString,
                response_deserializer=ips_dot_rssi_dot_v1_dot_stat__pb2.CollectDataResponse.FromString,
                )
        self.GetStatData = channel.unary_unary(
                '/ips.rssi.v1.StatCollectionService/GetStatData',
                request_serializer=ips_dot_rssi_dot_v1_dot_stat__pb2.GetStatDataRequest.SerializeToString,
                response_deserializer=ips_dot_rssi_dot_v1_dot_stat__pb2.GetStatDataResponse.FromString,
                )
        self.ReDoDataProcessing = channel.unary_unary(
                '/ips.rssi.v1.StatCollectionService/ReDoDataProcessing',
                request_serializer=ips_dot_rssi_dot_v1_dot_stat__pb2.ReDoDataProcessingRequest.SerializeToString,
                response_deserializer=ips_dot_rssi_dot_v1_dot_stat__pb2.ReDoDataProcessingResponse.FromString,
                )


class StatCollectionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CollectData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReDoDataProcessing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StatCollectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CollectData': grpc.unary_unary_rpc_method_handler(
                    servicer.CollectData,
                    request_deserializer=ips_dot_rssi_dot_v1_dot_stat__pb2.CollectDataRequest.FromString,
                    response_serializer=ips_dot_rssi_dot_v1_dot_stat__pb2.CollectDataResponse.SerializeToString,
            ),
            'GetStatData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatData,
                    request_deserializer=ips_dot_rssi_dot_v1_dot_stat__pb2.GetStatDataRequest.FromString,
                    response_serializer=ips_dot_rssi_dot_v1_dot_stat__pb2.GetStatDataResponse.SerializeToString,
            ),
            'ReDoDataProcessing': grpc.unary_unary_rpc_method_handler(
                    servicer.ReDoDataProcessing,
                    request_deserializer=ips_dot_rssi_dot_v1_dot_stat__pb2.ReDoDataProcessingRequest.FromString,
                    response_serializer=ips_dot_rssi_dot_v1_dot_stat__pb2.ReDoDataProcessingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ips.rssi.v1.StatCollectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StatCollectionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CollectData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ips.rssi.v1.StatCollectionService/CollectData',
            ips_dot_rssi_dot_v1_dot_stat__pb2.CollectDataRequest.SerializeToString,
            ips_dot_rssi_dot_v1_dot_stat__pb2.CollectDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ips.rssi.v1.StatCollectionService/GetStatData',
            ips_dot_rssi_dot_v1_dot_stat__pb2.GetStatDataRequest.SerializeToString,
            ips_dot_rssi_dot_v1_dot_stat__pb2.GetStatDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReDoDataProcessing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ips.rssi.v1.StatCollectionService/ReDoDataProcessing',
            ips_dot_rssi_dot_v1_dot_stat__pb2.ReDoDataProcessingRequest.SerializeToString,
            ips_dot_rssi_dot_v1_dot_stat__pb2.ReDoDataProcessingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
